// Protocol buffer definition for the UPF (User Plane Function) service

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: request.proto

package request

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FlowRequest represents a request for flow data using FSEID
type FlowRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fseid         string                 `protobuf:"bytes,1,opt,name=fseid,proto3" json:"fseid,omitempty"` // F-SEID (Fully Qualified SEID)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowRequest) Reset() {
	*x = FlowRequest{}
	mi := &file_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowRequest) ProtoMessage() {}

func (x *FlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowRequest.ProtoReflect.Descriptor instead.
func (*FlowRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0}
}

func (x *FlowRequest) GetFseid() string {
	if x != nil {
		return x.Fseid
	}
	return ""
}

// Reply contains flow statistics and IMSI information
type Reply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total_Packets uint64                 `protobuf:"varint,1,opt,name=Total_Packets,json=TotalPackets,proto3" json:"Total_Packets,omitempty"` // Total number of packets
	Rx_Packet     uint64                 `protobuf:"varint,2,opt,name=Rx_Packet,json=RxPacket,proto3" json:"Rx_Packet,omitempty"`             // Number of received packets
	Tx_Packet     uint64                 `protobuf:"varint,3,opt,name=Tx_Packet,json=TxPacket,proto3" json:"Tx_Packet,omitempty"`             // Number of transmitted packets
	Rx_Speed      uint64                 `protobuf:"varint,4,opt,name=Rx_Speed,json=RxSpeed,proto3" json:"Rx_Speed,omitempty"`                // Receive speed
	Tx_Speed      uint64                 `protobuf:"varint,5,opt,name=Tx_Speed,json=TxSpeed,proto3" json:"Tx_Speed,omitempty"`                // Transmit speed
	Total_Speed   uint64                 `protobuf:"varint,6,opt,name=Total_Speed,json=TotalSpeed,proto3" json:"Total_Speed,omitempty"`       // Total speed (Rx + Tx)
	All_IMSI      []string               `protobuf:"bytes,7,rep,name=All_IMSI,json=AllIMSI,proto3" json:"All_IMSI,omitempty"`                 // List of all IMSIs
	Count         uint64                 `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`                                   // Packet counter
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reply) Reset() {
	*x = Reply{}
	mi := &file_request_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{1}
}

func (x *Reply) GetTotal_Packets() uint64 {
	if x != nil {
		return x.Total_Packets
	}
	return 0
}

func (x *Reply) GetRx_Packet() uint64 {
	if x != nil {
		return x.Rx_Packet
	}
	return 0
}

func (x *Reply) GetTx_Packet() uint64 {
	if x != nil {
		return x.Tx_Packet
	}
	return 0
}

func (x *Reply) GetRx_Speed() uint64 {
	if x != nil {
		return x.Rx_Speed
	}
	return 0
}

func (x *Reply) GetTx_Speed() uint64 {
	if x != nil {
		return x.Tx_Speed
	}
	return 0
}

func (x *Reply) GetTotal_Speed() uint64 {
	if x != nil {
		return x.Total_Speed
	}
	return 0
}

func (x *Reply) GetAll_IMSI() []string {
	if x != nil {
		return x.All_IMSI
	}
	return nil
}

func (x *Reply) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// ConfigRequest is empty as it doesn't need parameters
type ConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	mi := &file_request_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{2}
}

// ConfigReply contains the complete UPF configuration
type ConfigReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *UPFConfig             `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"` // UPF configuration details
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigReply) Reset() {
	*x = ConfigReply{}
	mi := &file_request_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigReply) ProtoMessage() {}

func (x *ConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigReply.ProtoReflect.Descriptor instead.
func (*ConfigReply) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigReply) GetConfig() *UPFConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// IMSIRequest contains the IMSI to query
type IMSIRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imsi          string                 `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"` // International Mobile Subscriber Identity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IMSIRequest) Reset() {
	*x = IMSIRequest{}
	mi := &file_request_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IMSIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMSIRequest) ProtoMessage() {}

func (x *IMSIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMSIRequest.ProtoReflect.Descriptor instead.
func (*IMSIRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{4}
}

func (x *IMSIRequest) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

// IMSIReply contains IMSI-related information
type IMSIReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imsi          []*IMSIStruct          `protobuf:"bytes,1,rep,name=imsi,proto3" json:"imsi,omitempty"` // List of IMSI structures
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IMSIReply) Reset() {
	*x = IMSIReply{}
	mi := &file_request_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IMSIReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMSIReply) ProtoMessage() {}

func (x *IMSIReply) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMSIReply.ProtoReflect.Descriptor instead.
func (*IMSIReply) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{5}
}

func (x *IMSIReply) GetImsi() []*IMSIStruct {
	if x != nil {
		return x.Imsi
	}
	return nil
}

// ValidatePDRRequest contains the parameters to validate a PDR
type ValidatePDRRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imsi          string                 `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`                // IMSI of the subscriber
	PdrId         string                 `protobuf:"bytes,2,opt,name=pdr_id,json=pdrId,proto3" json:"pdr_id,omitempty"` // PDR ID to validate
	Dnn           string                 `protobuf:"bytes,3,opt,name=dnn,proto3" json:"dnn,omitempty"`                  // Data Network Name
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidatePDRRequest) Reset() {
	*x = ValidatePDRRequest{}
	mi := &file_request_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidatePDRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePDRRequest) ProtoMessage() {}

func (x *ValidatePDRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePDRRequest.ProtoReflect.Descriptor instead.
func (*ValidatePDRRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{6}
}

func (x *ValidatePDRRequest) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *ValidatePDRRequest) GetPdrId() string {
	if x != nil {
		return x.PdrId
	}
	return ""
}

func (x *ValidatePDRRequest) GetDnn() string {
	if x != nil {
		return x.Dnn
	}
	return ""
}

// ValidatePDRReply contains the validation result
type ValidatePDRReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Valid         bool                   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`    // Whether the PDR is valid
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // Optional validation message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidatePDRReply) Reset() {
	*x = ValidatePDRReply{}
	mi := &file_request_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidatePDRReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePDRReply) ProtoMessage() {}

func (x *ValidatePDRReply) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePDRReply.ProtoReflect.Descriptor instead.
func (*ValidatePDRReply) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{7}
}

func (x *ValidatePDRReply) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ValidatePDRReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// RuleRequest contains the FSEID to query rules
type RuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fsied         string                 `protobuf:"bytes,1,opt,name=fsied,proto3" json:"fsied,omitempty"` // F-SEID for rule lookup
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuleRequest) Reset() {
	*x = RuleRequest{}
	mi := &file_request_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleRequest) ProtoMessage() {}

func (x *RuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleRequest.ProtoReflect.Descriptor instead.
func (*RuleRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{8}
}

func (x *RuleRequest) GetFsied() string {
	if x != nil {
		return x.Fsied
	}
	return ""
}

// RuleReply contains the complete session rules
type RuleReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *Rulestruct            `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"` // Session rule structure
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuleReply) Reset() {
	*x = RuleReply{}
	mi := &file_request_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleReply) ProtoMessage() {}

func (x *RuleReply) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleReply.ProtoReflect.Descriptor instead.
func (*RuleReply) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{9}
}

func (x *RuleReply) GetSession() *Rulestruct {
	if x != nil {
		return x.Session
	}
	return nil
}

// rulestruct contains all rule components for a session
type Rulestruct struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pdr           *Pdrstruct             `protobuf:"bytes,1,opt,name=pdr,proto3" json:"pdr,omitempty"` // Packet Detection Rule
	Far           *Farstruct             `protobuf:"bytes,2,opt,name=far,proto3" json:"far,omitempty"` // Forwarding Action Rule
	Qer           *Qerstruct             `protobuf:"bytes,3,opt,name=qer,proto3" json:"qer,omitempty"` // QoS Enforcement Rule
	Urr           *Urrstruct             `protobuf:"bytes,4,opt,name=urr,proto3" json:"urr,omitempty"` // Usage Reporting Rule
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Rulestruct) Reset() {
	*x = Rulestruct{}
	mi := &file_request_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rulestruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rulestruct) ProtoMessage() {}

func (x *Rulestruct) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rulestruct.ProtoReflect.Descriptor instead.
func (*Rulestruct) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{10}
}

func (x *Rulestruct) GetPdr() *Pdrstruct {
	if x != nil {
		return x.Pdr
	}
	return nil
}

func (x *Rulestruct) GetFar() *Farstruct {
	if x != nil {
		return x.Far
	}
	return nil
}

func (x *Rulestruct) GetQer() *Qerstruct {
	if x != nil {
		return x.Qer
	}
	return nil
}

func (x *Rulestruct) GetUrr() *Urrstruct {
	if x != nil {
		return x.Urr
	}
	return nil
}

// pdrstruct defines Packet Detection Rule structure
type Pdrstruct struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PdrId         []string               `protobuf:"bytes,1,rep,name=pdr_id,json=pdrId,proto3" json:"pdr_id,omitempty"` // List of PDR IDs
	Fsied         string                 `protobuf:"bytes,2,opt,name=fsied,proto3" json:"fsied,omitempty"`              // Associated F-SEID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pdrstruct) Reset() {
	*x = Pdrstruct{}
	mi := &file_request_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pdrstruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pdrstruct) ProtoMessage() {}

func (x *Pdrstruct) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pdrstruct.ProtoReflect.Descriptor instead.
func (*Pdrstruct) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{11}
}

func (x *Pdrstruct) GetPdrId() []string {
	if x != nil {
		return x.PdrId
	}
	return nil
}

func (x *Pdrstruct) GetFsied() string {
	if x != nil {
		return x.Fsied
	}
	return ""
}

// farstruct defines Forwarding Action Rule structure
type Farstruct struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FarId         string                 `protobuf:"bytes,1,opt,name=far_id,json=farId,proto3" json:"far_id,omitempty"` // FAR ID
	Fsied         string                 `protobuf:"bytes,2,opt,name=fsied,proto3" json:"fsied,omitempty"`              // Associated F-SEID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Farstruct) Reset() {
	*x = Farstruct{}
	mi := &file_request_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Farstruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Farstruct) ProtoMessage() {}

func (x *Farstruct) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Farstruct.ProtoReflect.Descriptor instead.
func (*Farstruct) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{12}
}

func (x *Farstruct) GetFarId() string {
	if x != nil {
		return x.FarId
	}
	return ""
}

func (x *Farstruct) GetFsied() string {
	if x != nil {
		return x.Fsied
	}
	return ""
}

// qerstruct defines QoS Enforcement Rule structure
type Qerstruct struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QerId         string                 `protobuf:"bytes,1,opt,name=qer_id,json=qerId,proto3" json:"qer_id,omitempty"` // QER ID
	Fsied         string                 `protobuf:"bytes,2,opt,name=fsied,proto3" json:"fsied,omitempty"`              // Associated F-SEID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Qerstruct) Reset() {
	*x = Qerstruct{}
	mi := &file_request_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Qerstruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qerstruct) ProtoMessage() {}

func (x *Qerstruct) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qerstruct.ProtoReflect.Descriptor instead.
func (*Qerstruct) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{13}
}

func (x *Qerstruct) GetQerId() string {
	if x != nil {
		return x.QerId
	}
	return ""
}

func (x *Qerstruct) GetFsied() string {
	if x != nil {
		return x.Fsied
	}
	return ""
}

// urrstruct defines Usage Reporting Rule structure
type Urrstruct struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UrrId         string                 `protobuf:"bytes,1,opt,name=urr_id,json=urrId,proto3" json:"urr_id,omitempty"` // URR ID
	Fsied         string                 `protobuf:"bytes,2,opt,name=fsied,proto3" json:"fsied,omitempty"`              // Associated F-SEID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Urrstruct) Reset() {
	*x = Urrstruct{}
	mi := &file_request_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Urrstruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Urrstruct) ProtoMessage() {}

func (x *Urrstruct) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Urrstruct.ProtoReflect.Descriptor instead.
func (*Urrstruct) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{14}
}

func (x *Urrstruct) GetUrrId() string {
	if x != nil {
		return x.UrrId
	}
	return ""
}

func (x *Urrstruct) GetFsied() string {
	if x != nil {
		return x.Fsied
	}
	return ""
}

// IMSIStruct contains network type associations for an IMSI
type IMSIStruct struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Internet      string                 `protobuf:"bytes,1,opt,name=Internet,proto3" json:"Internet,omitempty"` // Internet service F-SEID
	IMS           string                 `protobuf:"bytes,2,opt,name=IMS,proto3" json:"IMS,omitempty"`           // IMS service F-SEID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IMSIStruct) Reset() {
	*x = IMSIStruct{}
	mi := &file_request_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IMSIStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMSIStruct) ProtoMessage() {}

func (x *IMSIStruct) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMSIStruct.ProtoReflect.Descriptor instead.
func (*IMSIStruct) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{15}
}

func (x *IMSIStruct) GetInternet() string {
	if x != nil {
		return x.Internet
	}
	return ""
}

func (x *IMSIStruct) GetIMS() string {
	if x != nil {
		return x.IMS
	}
	return ""
}

// UPFConfig defines the complete configuration for UPF
type UPFConfig struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Mode                     string                 `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`                                                                               // Operation mode
	TableSizes               *TableSizes            `protobuf:"bytes,2,opt,name=table_sizes,json=tableSizes,proto3" json:"table_sizes,omitempty"`                                                 // Size configurations for various tables
	LogLevel                 string                 `protobuf:"bytes,3,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`                                                       // Logging level
	Sim                      *SimConfig             `protobuf:"bytes,4,opt,name=sim,proto3" json:"sim,omitempty"`                                                                                 // Simulation configuration
	Hwcksum                  bool                   `protobuf:"varint,5,opt,name=hwcksum,proto3" json:"hwcksum,omitempty"`                                                                        // Hardware checksum flag
	Gtppsc                   bool                   `protobuf:"varint,6,opt,name=gtppsc,proto3" json:"gtppsc,omitempty"`                                                                          // GTPP service control flag
	Ddp                      bool                   `protobuf:"varint,7,opt,name=ddp,proto3" json:"ddp,omitempty"`                                                                                // Dynamic Data Path flag
	MeasureUpf               bool                   `protobuf:"varint,8,opt,name=measure_upf,json=measureUpf,proto3" json:"measure_upf,omitempty"`                                                // UPF measurement flag
	MeasureFlow              bool                   `protobuf:"varint,9,opt,name=measure_flow,json=measureFlow,proto3" json:"measure_flow,omitempty"`                                             // Flow measurement flag
	Access                   *Interface             `protobuf:"bytes,10,opt,name=access,proto3" json:"access,omitempty"`                                                                          // Access interface configuration
	Core                     *Interface             `protobuf:"bytes,11,opt,name=core,proto3" json:"core,omitempty"`                                                                              // Core interface configuration
	Workers                  int32                  `protobuf:"varint,12,opt,name=workers,proto3" json:"workers,omitempty"`                                                                       // Number of worker threads
	MaxReqRetries            int32                  `protobuf:"varint,13,opt,name=max_req_retries,json=maxReqRetries,proto3" json:"max_req_retries,omitempty"`                                    // Maximum request retries
	RespTimeout              string                 `protobuf:"bytes,14,opt,name=resp_timeout,json=respTimeout,proto3" json:"resp_timeout,omitempty"`                                             // Response timeout duration
	EnableNtf                bool                   `protobuf:"varint,15,opt,name=enable_ntf,json=enableNtf,proto3" json:"enable_ntf,omitempty"`                                                  // Notification enable flag
	EnableP4Rt               bool                   `protobuf:"varint,16,opt,name=enable_p4rt,json=enableP4rt,proto3" json:"enable_p4rt,omitempty"`                                               // P4 Runtime enable flag
	EnableHbTimer            bool                   `protobuf:"varint,17,opt,name=enable_hbTimer,json=enableHbTimer,proto3" json:"enable_hbTimer,omitempty"`                                      // Heartbeat timer enable flag
	EnableGtpuPathMonitoring bool                   `protobuf:"varint,18,opt,name=enable_gtpu_path_monitoring,json=enableGtpuPathMonitoring,proto3" json:"enable_gtpu_path_monitoring,omitempty"` // GTPU path monitoring flag
	QciQosConfig             []*QoSConfig           `protobuf:"bytes,19,rep,name=qci_qos_config,json=qciQosConfig,proto3" json:"qci_qos_config,omitempty"`                                        // QoS configurations per QCI
	SliceRateLimitConfig     *SliceRateLimit        `protobuf:"bytes,20,opt,name=slice_rate_limit_config,json=sliceRateLimitConfig,proto3" json:"slice_rate_limit_config,omitempty"`              // Slice rate limit configurations
	Cpiface                  *CPInterface           `protobuf:"bytes,21,opt,name=cpiface,proto3" json:"cpiface,omitempty"`                                                                        // Control Plane interface configuration
	P4Rtciface               *P4RTCInterface        `protobuf:"bytes,22,opt,name=p4rtciface,proto3" json:"p4rtciface,omitempty"`                                                                  // P4 Runtime Traffic Control interface configuration
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UPFConfig) Reset() {
	*x = UPFConfig{}
	mi := &file_request_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UPFConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPFConfig) ProtoMessage() {}

func (x *UPFConfig) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPFConfig.ProtoReflect.Descriptor instead.
func (*UPFConfig) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{16}
}

func (x *UPFConfig) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *UPFConfig) GetTableSizes() *TableSizes {
	if x != nil {
		return x.TableSizes
	}
	return nil
}

func (x *UPFConfig) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *UPFConfig) GetSim() *SimConfig {
	if x != nil {
		return x.Sim
	}
	return nil
}

func (x *UPFConfig) GetHwcksum() bool {
	if x != nil {
		return x.Hwcksum
	}
	return false
}

func (x *UPFConfig) GetGtppsc() bool {
	if x != nil {
		return x.Gtppsc
	}
	return false
}

func (x *UPFConfig) GetDdp() bool {
	if x != nil {
		return x.Ddp
	}
	return false
}

func (x *UPFConfig) GetMeasureUpf() bool {
	if x != nil {
		return x.MeasureUpf
	}
	return false
}

func (x *UPFConfig) GetMeasureFlow() bool {
	if x != nil {
		return x.MeasureFlow
	}
	return false
}

func (x *UPFConfig) GetAccess() *Interface {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *UPFConfig) GetCore() *Interface {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *UPFConfig) GetWorkers() int32 {
	if x != nil {
		return x.Workers
	}
	return 0
}

func (x *UPFConfig) GetMaxReqRetries() int32 {
	if x != nil {
		return x.MaxReqRetries
	}
	return 0
}

func (x *UPFConfig) GetRespTimeout() string {
	if x != nil {
		return x.RespTimeout
	}
	return ""
}

func (x *UPFConfig) GetEnableNtf() bool {
	if x != nil {
		return x.EnableNtf
	}
	return false
}

func (x *UPFConfig) GetEnableP4Rt() bool {
	if x != nil {
		return x.EnableP4Rt
	}
	return false
}

func (x *UPFConfig) GetEnableHbTimer() bool {
	if x != nil {
		return x.EnableHbTimer
	}
	return false
}

func (x *UPFConfig) GetEnableGtpuPathMonitoring() bool {
	if x != nil {
		return x.EnableGtpuPathMonitoring
	}
	return false
}

func (x *UPFConfig) GetQciQosConfig() []*QoSConfig {
	if x != nil {
		return x.QciQosConfig
	}
	return nil
}

func (x *UPFConfig) GetSliceRateLimitConfig() *SliceRateLimit {
	if x != nil {
		return x.SliceRateLimitConfig
	}
	return nil
}

func (x *UPFConfig) GetCpiface() *CPInterface {
	if x != nil {
		return x.Cpiface
	}
	return nil
}

func (x *UPFConfig) GetP4Rtciface() *P4RTCInterface {
	if x != nil {
		return x.P4Rtciface
	}
	return nil
}

// TableSizes defines the size configuration for various lookup tables in the UPF
type TableSizes struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PdrLookup        int32                  `protobuf:"varint,1,opt,name=pdrLookup,proto3" json:"pdrLookup,omitempty"`               // Size of the PDR lookup table
	FlowMeasure      int32                  `protobuf:"varint,2,opt,name=flowMeasure,proto3" json:"flowMeasure,omitempty"`           // Size of the flow measurement table
	AppQERLookup     int32                  `protobuf:"varint,3,opt,name=appQERLookup,proto3" json:"appQERLookup,omitempty"`         // Size of the application QER lookup table
	SessionQERLookup int32                  `protobuf:"varint,4,opt,name=sessionQERLookup,proto3" json:"sessionQERLookup,omitempty"` // Size of the session QER lookup table
	FarLookup        int32                  `protobuf:"varint,5,opt,name=farLookup,proto3" json:"farLookup,omitempty"`               // Size of the FAR lookup table
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TableSizes) Reset() {
	*x = TableSizes{}
	mi := &file_request_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableSizes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSizes) ProtoMessage() {}

func (x *TableSizes) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSizes.ProtoReflect.Descriptor instead.
func (*TableSizes) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{17}
}

func (x *TableSizes) GetPdrLookup() int32 {
	if x != nil {
		return x.PdrLookup
	}
	return 0
}

func (x *TableSizes) GetFlowMeasure() int32 {
	if x != nil {
		return x.FlowMeasure
	}
	return 0
}

func (x *TableSizes) GetAppQERLookup() int32 {
	if x != nil {
		return x.AppQERLookup
	}
	return 0
}

func (x *TableSizes) GetSessionQERLookup() int32 {
	if x != nil {
		return x.SessionQERLookup
	}
	return 0
}

func (x *TableSizes) GetFarLookup() int32 {
	if x != nil {
		return x.FarLookup
	}
	return 0
}

// SimConfig defines the simulation parameters for the UPF
type SimConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Core          string                 `protobuf:"bytes,1,opt,name=core,proto3" json:"core,omitempty"`                                    // Core network IP address
	MaxSessions   int32                  `protobuf:"varint,2,opt,name=max_sessions,json=maxSessions,proto3" json:"max_sessions,omitempty"`  // Maximum number of sessions
	StartUeIp     string                 `protobuf:"bytes,3,opt,name=start_ue_ip,json=startUeIp,proto3" json:"start_ue_ip,omitempty"`       // Starting UE IP address
	StartEnbIp    string                 `protobuf:"bytes,4,opt,name=start_enb_ip,json=startEnbIp,proto3" json:"start_enb_ip,omitempty"`    // Starting eNB IP address
	StartAupfIp   string                 `protobuf:"bytes,5,opt,name=start_aupf_ip,json=startAupfIp,proto3" json:"start_aupf_ip,omitempty"` // Starting AUPF IP address
	N6AppIp       string                 `protobuf:"bytes,6,opt,name=n6_app_ip,json=n6AppIp,proto3" json:"n6_app_ip,omitempty"`             // N6 application IP address
	N9AppIp       string                 `protobuf:"bytes,7,opt,name=n9_app_ip,json=n9AppIp,proto3" json:"n9_app_ip,omitempty"`             // N9 application IP address
	StartN3Teid   string                 `protobuf:"bytes,8,opt,name=start_n3_teid,json=startN3Teid,proto3" json:"start_n3_teid,omitempty"` // Starting N3 TEID
	StartN9Teid   string                 `protobuf:"bytes,9,opt,name=start_n9_teid,json=startN9Teid,proto3" json:"start_n9_teid,omitempty"` // Starting N9 TEID
	UplinkMbr     int32                  `protobuf:"varint,10,opt,name=uplink_mbr,json=uplinkMbr,proto3" json:"uplink_mbr,omitempty"`       // Uplink maximum bit rate
	UplinkGbr     int32                  `protobuf:"varint,11,opt,name=uplink_gbr,json=uplinkGbr,proto3" json:"uplink_gbr,omitempty"`       // Uplink guaranteed bit rate
	DownlinkMbr   int32                  `protobuf:"varint,12,opt,name=downlink_mbr,json=downlinkMbr,proto3" json:"downlink_mbr,omitempty"` // Downlink maximum bit rate
	DownlinkGbr   int32                  `protobuf:"varint,13,opt,name=downlink_gbr,json=downlinkGbr,proto3" json:"downlink_gbr,omitempty"` // Downlink guaranteed bit rate
	PktSize       int32                  `protobuf:"varint,14,opt,name=pkt_size,json=pktSize,proto3" json:"pkt_size,omitempty"`             // Packet size
	TotalFlows    int32                  `protobuf:"varint,15,opt,name=total_flows,json=totalFlows,proto3" json:"total_flows,omitempty"`    // Total number of flows
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimConfig) Reset() {
	*x = SimConfig{}
	mi := &file_request_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimConfig) ProtoMessage() {}

func (x *SimConfig) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimConfig.ProtoReflect.Descriptor instead.
func (*SimConfig) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{18}
}

func (x *SimConfig) GetCore() string {
	if x != nil {
		return x.Core
	}
	return ""
}

func (x *SimConfig) GetMaxSessions() int32 {
	if x != nil {
		return x.MaxSessions
	}
	return 0
}

func (x *SimConfig) GetStartUeIp() string {
	if x != nil {
		return x.StartUeIp
	}
	return ""
}

func (x *SimConfig) GetStartEnbIp() string {
	if x != nil {
		return x.StartEnbIp
	}
	return ""
}

func (x *SimConfig) GetStartAupfIp() string {
	if x != nil {
		return x.StartAupfIp
	}
	return ""
}

func (x *SimConfig) GetN6AppIp() string {
	if x != nil {
		return x.N6AppIp
	}
	return ""
}

func (x *SimConfig) GetN9AppIp() string {
	if x != nil {
		return x.N9AppIp
	}
	return ""
}

func (x *SimConfig) GetStartN3Teid() string {
	if x != nil {
		return x.StartN3Teid
	}
	return ""
}

func (x *SimConfig) GetStartN9Teid() string {
	if x != nil {
		return x.StartN9Teid
	}
	return ""
}

func (x *SimConfig) GetUplinkMbr() int32 {
	if x != nil {
		return x.UplinkMbr
	}
	return 0
}

func (x *SimConfig) GetUplinkGbr() int32 {
	if x != nil {
		return x.UplinkGbr
	}
	return 0
}

func (x *SimConfig) GetDownlinkMbr() int32 {
	if x != nil {
		return x.DownlinkMbr
	}
	return 0
}

func (x *SimConfig) GetDownlinkGbr() int32 {
	if x != nil {
		return x.DownlinkGbr
	}
	return 0
}

func (x *SimConfig) GetPktSize() int32 {
	if x != nil {
		return x.PktSize
	}
	return 0
}

func (x *SimConfig) GetTotalFlows() int32 {
	if x != nil {
		return x.TotalFlows
	}
	return 0
}

// Interface defines the configuration for a network interface
type Interface struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ifname        string                 `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"` // Interface name
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Interface) Reset() {
	*x = Interface{}
	mi := &file_request_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{19}
}

func (x *Interface) GetIfname() string {
	if x != nil {
		return x.Ifname
	}
	return ""
}

// QoSConfig defines the Quality of Service parameters for a specific QCI
type QoSConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Qci             int32                  `protobuf:"varint,1,opt,name=qci,proto3" json:"qci,omitempty"`                                                  // QoS Class Identifier
	Cbs             int32                  `protobuf:"varint,2,opt,name=cbs,proto3" json:"cbs,omitempty"`                                                  // Committed Burst Size
	Ebs             int32                  `protobuf:"varint,3,opt,name=ebs,proto3" json:"ebs,omitempty"`                                                  // Excess Burst Size
	Pbs             int32                  `protobuf:"varint,4,opt,name=pbs,proto3" json:"pbs,omitempty"`                                                  // Peak Data Rate
	BurstDurationMs int32                  `protobuf:"varint,5,opt,name=burst_duration_ms,json=burstDurationMs,proto3" json:"burst_duration_ms,omitempty"` // Burst duration in milliseconds
	Priority        int32                  `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`                                        // Scheduling priority
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *QoSConfig) Reset() {
	*x = QoSConfig{}
	mi := &file_request_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QoSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSConfig) ProtoMessage() {}

func (x *QoSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSConfig.ProtoReflect.Descriptor instead.
func (*QoSConfig) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{20}
}

func (x *QoSConfig) GetQci() int32 {
	if x != nil {
		return x.Qci
	}
	return 0
}

func (x *QoSConfig) GetCbs() int32 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *QoSConfig) GetEbs() int32 {
	if x != nil {
		return x.Ebs
	}
	return 0
}

func (x *QoSConfig) GetPbs() int32 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *QoSConfig) GetBurstDurationMs() int32 {
	if x != nil {
		return x.BurstDurationMs
	}
	return 0
}

func (x *QoSConfig) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// SliceRateLimit defines the rate limiting parameters for a slice
type SliceRateLimit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	N6Bps         int32                  `protobuf:"varint,1,opt,name=n6_bps,json=n6Bps,proto3" json:"n6_bps,omitempty"`                        // N6 rate limit in bits per second
	N6BurstBytes  int32                  `protobuf:"varint,2,opt,name=n6_burst_bytes,json=n6BurstBytes,proto3" json:"n6_burst_bytes,omitempty"` // N6 burst size in bytes
	N3Bps         int32                  `protobuf:"varint,3,opt,name=n3_bps,json=n3Bps,proto3" json:"n3_bps,omitempty"`                        // N3 rate limit in bits per second
	N3BurstBytes  int32                  `protobuf:"varint,4,opt,name=n3_burst_bytes,json=n3BurstBytes,proto3" json:"n3_burst_bytes,omitempty"` // N3 burst size in bytes
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SliceRateLimit) Reset() {
	*x = SliceRateLimit{}
	mi := &file_request_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SliceRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceRateLimit) ProtoMessage() {}

func (x *SliceRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceRateLimit.ProtoReflect.Descriptor instead.
func (*SliceRateLimit) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{21}
}

func (x *SliceRateLimit) GetN6Bps() int32 {
	if x != nil {
		return x.N6Bps
	}
	return 0
}

func (x *SliceRateLimit) GetN6BurstBytes() int32 {
	if x != nil {
		return x.N6BurstBytes
	}
	return 0
}

func (x *SliceRateLimit) GetN3Bps() int32 {
	if x != nil {
		return x.N3Bps
	}
	return 0
}

func (x *SliceRateLimit) GetN3BurstBytes() int32 {
	if x != nil {
		return x.N3BurstBytes
	}
	return 0
}

// CPInterface defines the configuration for the Control Plane interface
type CPInterface struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Peers           []string               `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`                                                 // List of peer addresses
	Dnn             string                 `protobuf:"bytes,2,opt,name=dnn,proto3" json:"dnn,omitempty"`                                                     // Data Network Name
	HttpPort        string                 `protobuf:"bytes,3,opt,name=http_port,json=httpPort,proto3" json:"http_port,omitempty"`                           // HTTP port for communication
	EnableUeIpAlloc bool                   `protobuf:"varint,4,opt,name=enable_ue_ip_alloc,json=enableUeIpAlloc,proto3" json:"enable_ue_ip_alloc,omitempty"` // Flag to enable UE IP allocation
	UeIpPool        string                 `protobuf:"bytes,5,opt,name=ue_ip_pool,json=ueIpPool,proto3" json:"ue_ip_pool,omitempty"`                         // UE IP address pool
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPInterface) Reset() {
	*x = CPInterface{}
	mi := &file_request_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPInterface) ProtoMessage() {}

func (x *CPInterface) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPInterface.ProtoReflect.Descriptor instead.
func (*CPInterface) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{22}
}

func (x *CPInterface) GetPeers() []string {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *CPInterface) GetDnn() string {
	if x != nil {
		return x.Dnn
	}
	return ""
}

func (x *CPInterface) GetHttpPort() string {
	if x != nil {
		return x.HttpPort
	}
	return ""
}

func (x *CPInterface) GetEnableUeIpAlloc() bool {
	if x != nil {
		return x.EnableUeIpAlloc
	}
	return false
}

func (x *CPInterface) GetUeIpPool() string {
	if x != nil {
		return x.UeIpPool
	}
	return ""
}

// P4RTCInterface defines the configuration for the P4 Runtime Traffic Control interface
type P4RTCInterface struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AccessIp            string                 `protobuf:"bytes,1,opt,name=access_ip,json=accessIp,proto3" json:"access_ip,omitempty"`                                       // Access IP address
	P4RtcServer         string                 `protobuf:"bytes,2,opt,name=p4rtc_server,json=p4rtcServer,proto3" json:"p4rtc_server,omitempty"`                              // P4 Runtime server address
	P4RtcPort           string                 `protobuf:"bytes,3,opt,name=p4rtc_port,json=p4rtcPort,proto3" json:"p4rtc_port,omitempty"`                                    // P4 Runtime server port
	SliceId             int32                  `protobuf:"varint,4,opt,name=slice_id,json=sliceId,proto3" json:"slice_id,omitempty"`                                         // Slice identifier
	DefaultTc           int32                  `protobuf:"varint,5,opt,name=default_tc,json=defaultTc,proto3" json:"default_tc,omitempty"`                                   // Default traffic class
	ClearStateOnRestart bool                   `protobuf:"varint,6,opt,name=clear_state_on_restart,json=clearStateOnRestart,proto3" json:"clear_state_on_restart,omitempty"` // Flag to clear state on restart
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *P4RTCInterface) Reset() {
	*x = P4RTCInterface{}
	mi := &file_request_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *P4RTCInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P4RTCInterface) ProtoMessage() {}

func (x *P4RTCInterface) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P4RTCInterface.ProtoReflect.Descriptor instead.
func (*P4RTCInterface) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{23}
}

func (x *P4RTCInterface) GetAccessIp() string {
	if x != nil {
		return x.AccessIp
	}
	return ""
}

func (x *P4RTCInterface) GetP4RtcServer() string {
	if x != nil {
		return x.P4RtcServer
	}
	return ""
}

func (x *P4RTCInterface) GetP4RtcPort() string {
	if x != nil {
		return x.P4RtcPort
	}
	return ""
}

func (x *P4RTCInterface) GetSliceId() int32 {
	if x != nil {
		return x.SliceId
	}
	return 0
}

func (x *P4RTCInterface) GetDefaultTc() int32 {
	if x != nil {
		return x.DefaultTc
	}
	return 0
}

func (x *P4RTCInterface) GetClearStateOnRestart() bool {
	if x != nil {
		return x.ClearStateOnRestart
	}
	return false
}

var File_request_proto protoreflect.FileDescriptor

const file_request_proto_rawDesc = "" +
	"\n" +
	"\rrequest.proto\x12\x06client\"#\n" +
	"\vFlowRequest\x12\x14\n" +
	"\x05fseid\x18\x01 \x01(\tR\x05fseid\"\xee\x01\n" +
	"\x05Reply\x12#\n" +
	"\rTotal_Packets\x18\x01 \x01(\x04R\fTotalPackets\x12\x1b\n" +
	"\tRx_Packet\x18\x02 \x01(\x04R\bRxPacket\x12\x1b\n" +
	"\tTx_Packet\x18\x03 \x01(\x04R\bTxPacket\x12\x19\n" +
	"\bRx_Speed\x18\x04 \x01(\x04R\aRxSpeed\x12\x19\n" +
	"\bTx_Speed\x18\x05 \x01(\x04R\aTxSpeed\x12\x1f\n" +
	"\vTotal_Speed\x18\x06 \x01(\x04R\n" +
	"TotalSpeed\x12\x19\n" +
	"\bAll_IMSI\x18\a \x03(\tR\aAllIMSI\x12\x14\n" +
	"\x05count\x18\b \x01(\x04R\x05count\"\x0f\n" +
	"\rConfigRequest\"8\n" +
	"\vConfigReply\x12)\n" +
	"\x06config\x18\x01 \x01(\v2\x11.client.UPFConfigR\x06config\"!\n" +
	"\vIMSIRequest\x12\x12\n" +
	"\x04imsi\x18\x01 \x01(\tR\x04imsi\"3\n" +
	"\tIMSIReply\x12&\n" +
	"\x04imsi\x18\x01 \x03(\v2\x12.client.IMSIStructR\x04imsi\"Q\n" +
	"\x12ValidatePDRRequest\x12\x12\n" +
	"\x04imsi\x18\x01 \x01(\tR\x04imsi\x12\x15\n" +
	"\x06pdr_id\x18\x02 \x01(\tR\x05pdrId\x12\x10\n" +
	"\x03dnn\x18\x03 \x01(\tR\x03dnn\"B\n" +
	"\x10ValidatePDRReply\x12\x14\n" +
	"\x05valid\x18\x01 \x01(\bR\x05valid\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"#\n" +
	"\vRuleRequest\x12\x14\n" +
	"\x05fsied\x18\x01 \x01(\tR\x05fsied\"9\n" +
	"\tRuleReply\x12,\n" +
	"\asession\x18\x01 \x01(\v2\x12.client.rulestructR\asession\"\xa0\x01\n" +
	"\n" +
	"rulestruct\x12#\n" +
	"\x03pdr\x18\x01 \x01(\v2\x11.client.pdrstructR\x03pdr\x12#\n" +
	"\x03far\x18\x02 \x01(\v2\x11.client.farstructR\x03far\x12#\n" +
	"\x03qer\x18\x03 \x01(\v2\x11.client.qerstructR\x03qer\x12#\n" +
	"\x03urr\x18\x04 \x01(\v2\x11.client.urrstructR\x03urr\"8\n" +
	"\tpdrstruct\x12\x15\n" +
	"\x06pdr_id\x18\x01 \x03(\tR\x05pdrId\x12\x14\n" +
	"\x05fsied\x18\x02 \x01(\tR\x05fsied\"8\n" +
	"\tfarstruct\x12\x15\n" +
	"\x06far_id\x18\x01 \x01(\tR\x05farId\x12\x14\n" +
	"\x05fsied\x18\x02 \x01(\tR\x05fsied\"8\n" +
	"\tqerstruct\x12\x15\n" +
	"\x06qer_id\x18\x01 \x01(\tR\x05qerId\x12\x14\n" +
	"\x05fsied\x18\x02 \x01(\tR\x05fsied\"8\n" +
	"\turrstruct\x12\x15\n" +
	"\x06urr_id\x18\x01 \x01(\tR\x05urrId\x12\x14\n" +
	"\x05fsied\x18\x02 \x01(\tR\x05fsied\":\n" +
	"\n" +
	"IMSIStruct\x12\x1a\n" +
	"\bInternet\x18\x01 \x01(\tR\bInternet\x12\x10\n" +
	"\x03IMS\x18\x02 \x01(\tR\x03IMS\"\xea\x06\n" +
	"\tUPFConfig\x12\x12\n" +
	"\x04mode\x18\x01 \x01(\tR\x04mode\x123\n" +
	"\vtable_sizes\x18\x02 \x01(\v2\x12.client.TableSizesR\n" +
	"tableSizes\x12\x1b\n" +
	"\tlog_level\x18\x03 \x01(\tR\blogLevel\x12#\n" +
	"\x03sim\x18\x04 \x01(\v2\x11.client.SimConfigR\x03sim\x12\x18\n" +
	"\ahwcksum\x18\x05 \x01(\bR\ahwcksum\x12\x16\n" +
	"\x06gtppsc\x18\x06 \x01(\bR\x06gtppsc\x12\x10\n" +
	"\x03ddp\x18\a \x01(\bR\x03ddp\x12\x1f\n" +
	"\vmeasure_upf\x18\b \x01(\bR\n" +
	"measureUpf\x12!\n" +
	"\fmeasure_flow\x18\t \x01(\bR\vmeasureFlow\x12)\n" +
	"\x06access\x18\n" +
	" \x01(\v2\x11.client.InterfaceR\x06access\x12%\n" +
	"\x04core\x18\v \x01(\v2\x11.client.InterfaceR\x04core\x12\x18\n" +
	"\aworkers\x18\f \x01(\x05R\aworkers\x12&\n" +
	"\x0fmax_req_retries\x18\r \x01(\x05R\rmaxReqRetries\x12!\n" +
	"\fresp_timeout\x18\x0e \x01(\tR\vrespTimeout\x12\x1d\n" +
	"\n" +
	"enable_ntf\x18\x0f \x01(\bR\tenableNtf\x12\x1f\n" +
	"\venable_p4rt\x18\x10 \x01(\bR\n" +
	"enableP4rt\x12%\n" +
	"\x0eenable_hbTimer\x18\x11 \x01(\bR\renableHbTimer\x12=\n" +
	"\x1benable_gtpu_path_monitoring\x18\x12 \x01(\bR\x18enableGtpuPathMonitoring\x127\n" +
	"\x0eqci_qos_config\x18\x13 \x03(\v2\x11.client.QoSConfigR\fqciQosConfig\x12M\n" +
	"\x17slice_rate_limit_config\x18\x14 \x01(\v2\x16.client.SliceRateLimitR\x14sliceRateLimitConfig\x12-\n" +
	"\acpiface\x18\x15 \x01(\v2\x13.client.CPInterfaceR\acpiface\x126\n" +
	"\n" +
	"p4rtciface\x18\x16 \x01(\v2\x16.client.P4RTCInterfaceR\n" +
	"p4rtciface\"\xba\x01\n" +
	"\n" +
	"TableSizes\x12\x1c\n" +
	"\tpdrLookup\x18\x01 \x01(\x05R\tpdrLookup\x12 \n" +
	"\vflowMeasure\x18\x02 \x01(\x05R\vflowMeasure\x12\"\n" +
	"\fappQERLookup\x18\x03 \x01(\x05R\fappQERLookup\x12*\n" +
	"\x10sessionQERLookup\x18\x04 \x01(\x05R\x10sessionQERLookup\x12\x1c\n" +
	"\tfarLookup\x18\x05 \x01(\x05R\tfarLookup\"\xe8\x03\n" +
	"\tSimConfig\x12\x12\n" +
	"\x04core\x18\x01 \x01(\tR\x04core\x12!\n" +
	"\fmax_sessions\x18\x02 \x01(\x05R\vmaxSessions\x12\x1e\n" +
	"\vstart_ue_ip\x18\x03 \x01(\tR\tstartUeIp\x12 \n" +
	"\fstart_enb_ip\x18\x04 \x01(\tR\n" +
	"startEnbIp\x12\"\n" +
	"\rstart_aupf_ip\x18\x05 \x01(\tR\vstartAupfIp\x12\x1a\n" +
	"\tn6_app_ip\x18\x06 \x01(\tR\an6AppIp\x12\x1a\n" +
	"\tn9_app_ip\x18\a \x01(\tR\an9AppIp\x12\"\n" +
	"\rstart_n3_teid\x18\b \x01(\tR\vstartN3Teid\x12\"\n" +
	"\rstart_n9_teid\x18\t \x01(\tR\vstartN9Teid\x12\x1d\n" +
	"\n" +
	"uplink_mbr\x18\n" +
	" \x01(\x05R\tuplinkMbr\x12\x1d\n" +
	"\n" +
	"uplink_gbr\x18\v \x01(\x05R\tuplinkGbr\x12!\n" +
	"\fdownlink_mbr\x18\f \x01(\x05R\vdownlinkMbr\x12!\n" +
	"\fdownlink_gbr\x18\r \x01(\x05R\vdownlinkGbr\x12\x19\n" +
	"\bpkt_size\x18\x0e \x01(\x05R\apktSize\x12\x1f\n" +
	"\vtotal_flows\x18\x0f \x01(\x05R\n" +
	"totalFlows\"#\n" +
	"\tInterface\x12\x16\n" +
	"\x06ifname\x18\x01 \x01(\tR\x06ifname\"\x9b\x01\n" +
	"\tQoSConfig\x12\x10\n" +
	"\x03qci\x18\x01 \x01(\x05R\x03qci\x12\x10\n" +
	"\x03cbs\x18\x02 \x01(\x05R\x03cbs\x12\x10\n" +
	"\x03ebs\x18\x03 \x01(\x05R\x03ebs\x12\x10\n" +
	"\x03pbs\x18\x04 \x01(\x05R\x03pbs\x12*\n" +
	"\x11burst_duration_ms\x18\x05 \x01(\x05R\x0fburstDurationMs\x12\x1a\n" +
	"\bpriority\x18\x06 \x01(\x05R\bpriority\"\x8a\x01\n" +
	"\x0eSliceRateLimit\x12\x15\n" +
	"\x06n6_bps\x18\x01 \x01(\x05R\x05n6Bps\x12$\n" +
	"\x0en6_burst_bytes\x18\x02 \x01(\x05R\fn6BurstBytes\x12\x15\n" +
	"\x06n3_bps\x18\x03 \x01(\x05R\x05n3Bps\x12$\n" +
	"\x0en3_burst_bytes\x18\x04 \x01(\x05R\fn3BurstBytes\"\x9d\x01\n" +
	"\vCPInterface\x12\x14\n" +
	"\x05peers\x18\x01 \x03(\tR\x05peers\x12\x10\n" +
	"\x03dnn\x18\x02 \x01(\tR\x03dnn\x12\x1b\n" +
	"\thttp_port\x18\x03 \x01(\tR\bhttpPort\x12+\n" +
	"\x12enable_ue_ip_alloc\x18\x04 \x01(\bR\x0fenableUeIpAlloc\x12\x1c\n" +
	"\n" +
	"ue_ip_pool\x18\x05 \x01(\tR\bueIpPool\"\xde\x01\n" +
	"\x0eP4RTCInterface\x12\x1b\n" +
	"\taccess_ip\x18\x01 \x01(\tR\baccessIp\x12!\n" +
	"\fp4rtc_server\x18\x02 \x01(\tR\vp4rtcServer\x12\x1d\n" +
	"\n" +
	"p4rtc_port\x18\x03 \x01(\tR\tp4rtcPort\x12\x19\n" +
	"\bslice_id\x18\x04 \x01(\x05R\asliceId\x12\x1d\n" +
	"\n" +
	"default_tc\x18\x05 \x01(\x05R\tdefaultTc\x123\n" +
	"\x16clear_state_on_restart\x18\x06 \x01(\bR\x13clearStateOnRestart2\xa1\x02\n" +
	"\aRequest\x122\n" +
	"\n" +
	"PutRequest\x12\x13.client.FlowRequest\x1a\r.client.Reply0\x01\x127\n" +
	"\tGetConfig\x12\x15.client.ConfigRequest\x1a\x13.client.ConfigReply\x121\n" +
	"\aGetIMSI\x12\x13.client.IMSIRequest\x1a\x11.client.IMSIReply\x121\n" +
	"\aGetRule\x12\x13.client.RuleRequest\x1a\x11.client.RuleReply\x12C\n" +
	"\vValidatePDR\x12\x1a.client.ValidatePDRRequest\x1a\x18.client.ValidatePDRReplyB\x13Z\x11pkg/proto;requestb\x06proto3"

var (
	file_request_proto_rawDescOnce sync.Once
	file_request_proto_rawDescData []byte
)

func file_request_proto_rawDescGZIP() []byte {
	file_request_proto_rawDescOnce.Do(func() {
		file_request_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_request_proto_rawDesc), len(file_request_proto_rawDesc)))
	})
	return file_request_proto_rawDescData
}

var file_request_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_request_proto_goTypes = []any{
	(*FlowRequest)(nil),        // 0: client.FlowRequest
	(*Reply)(nil),              // 1: client.Reply
	(*ConfigRequest)(nil),      // 2: client.ConfigRequest
	(*ConfigReply)(nil),        // 3: client.ConfigReply
	(*IMSIRequest)(nil),        // 4: client.IMSIRequest
	(*IMSIReply)(nil),          // 5: client.IMSIReply
	(*ValidatePDRRequest)(nil), // 6: client.ValidatePDRRequest
	(*ValidatePDRReply)(nil),   // 7: client.ValidatePDRReply
	(*RuleRequest)(nil),        // 8: client.RuleRequest
	(*RuleReply)(nil),          // 9: client.RuleReply
	(*Rulestruct)(nil),         // 10: client.rulestruct
	(*Pdrstruct)(nil),          // 11: client.pdrstruct
	(*Farstruct)(nil),          // 12: client.farstruct
	(*Qerstruct)(nil),          // 13: client.qerstruct
	(*Urrstruct)(nil),          // 14: client.urrstruct
	(*IMSIStruct)(nil),         // 15: client.IMSIStruct
	(*UPFConfig)(nil),          // 16: client.UPFConfig
	(*TableSizes)(nil),         // 17: client.TableSizes
	(*SimConfig)(nil),          // 18: client.SimConfig
	(*Interface)(nil),          // 19: client.Interface
	(*QoSConfig)(nil),          // 20: client.QoSConfig
	(*SliceRateLimit)(nil),     // 21: client.SliceRateLimit
	(*CPInterface)(nil),        // 22: client.CPInterface
	(*P4RTCInterface)(nil),     // 23: client.P4RTCInterface
}
var file_request_proto_depIdxs = []int32{
	16, // 0: client.ConfigReply.config:type_name -> client.UPFConfig
	15, // 1: client.IMSIReply.imsi:type_name -> client.IMSIStruct
	10, // 2: client.RuleReply.session:type_name -> client.rulestruct
	11, // 3: client.rulestruct.pdr:type_name -> client.pdrstruct
	12, // 4: client.rulestruct.far:type_name -> client.farstruct
	13, // 5: client.rulestruct.qer:type_name -> client.qerstruct
	14, // 6: client.rulestruct.urr:type_name -> client.urrstruct
	17, // 7: client.UPFConfig.table_sizes:type_name -> client.TableSizes
	18, // 8: client.UPFConfig.sim:type_name -> client.SimConfig
	19, // 9: client.UPFConfig.access:type_name -> client.Interface
	19, // 10: client.UPFConfig.core:type_name -> client.Interface
	20, // 11: client.UPFConfig.qci_qos_config:type_name -> client.QoSConfig
	21, // 12: client.UPFConfig.slice_rate_limit_config:type_name -> client.SliceRateLimit
	22, // 13: client.UPFConfig.cpiface:type_name -> client.CPInterface
	23, // 14: client.UPFConfig.p4rtciface:type_name -> client.P4RTCInterface
	0,  // 15: client.Request.PutRequest:input_type -> client.FlowRequest
	2,  // 16: client.Request.GetConfig:input_type -> client.ConfigRequest
	4,  // 17: client.Request.GetIMSI:input_type -> client.IMSIRequest
	8,  // 18: client.Request.GetRule:input_type -> client.RuleRequest
	6,  // 19: client.Request.ValidatePDR:input_type -> client.ValidatePDRRequest
	1,  // 20: client.Request.PutRequest:output_type -> client.Reply
	3,  // 21: client.Request.GetConfig:output_type -> client.ConfigReply
	5,  // 22: client.Request.GetIMSI:output_type -> client.IMSIReply
	9,  // 23: client.Request.GetRule:output_type -> client.RuleReply
	7,  // 24: client.Request.ValidatePDR:output_type -> client.ValidatePDRReply
	20, // [20:25] is the sub-list for method output_type
	15, // [15:20] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_request_proto_init() }
func file_request_proto_init() {
	if File_request_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_request_proto_rawDesc), len(file_request_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_request_proto_goTypes,
		DependencyIndexes: file_request_proto_depIdxs,
		MessageInfos:      file_request_proto_msgTypes,
	}.Build()
	File_request_proto = out.File
	file_request_proto_goTypes = nil
	file_request_proto_depIdxs = nil
}
