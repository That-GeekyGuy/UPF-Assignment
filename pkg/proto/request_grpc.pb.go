// Protocol buffer definition for the UPF (User Plane Function) service

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: request.proto

package request

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Request_PutRequest_FullMethodName  = "/client.Request/PutRequest"
	Request_GetConfig_FullMethodName   = "/client.Request/GetConfig"
	Request_GetIMSI_FullMethodName     = "/client.Request/GetIMSI"
	Request_GetRule_FullMethodName     = "/client.Request/GetRule"
	Request_ValidatePDR_FullMethodName = "/client.Request/ValidatePDR"
)

// RequestClient is the client API for Request service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Request service defines the main gRPC interface for UPF operations
type RequestClient interface {
	// PutRequest streams flow data for a given FSEID
	PutRequest(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Reply], error)
	// GetConfig retrieves the UPF configuration
	GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigReply, error)
	// GetIMSI retrieves IMSI-related information
	GetIMSI(ctx context.Context, in *IMSIRequest, opts ...grpc.CallOption) (*IMSIReply, error)
	// GetRule retrieves rules associated with a specific FSEID
	GetRule(ctx context.Context, in *RuleRequest, opts ...grpc.CallOption) (*RuleReply, error)
	// ValidatePDR validates a PDR for a given IMSI and DNN
	ValidatePDR(ctx context.Context, in *ValidatePDRRequest, opts ...grpc.CallOption) (*ValidatePDRReply, error)
}

type requestClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestClient(cc grpc.ClientConnInterface) RequestClient {
	return &requestClient{cc}
}

func (c *requestClient) PutRequest(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Reply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Request_ServiceDesc.Streams[0], Request_PutRequest_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FlowRequest, Reply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Request_PutRequestClient = grpc.ServerStreamingClient[Reply]

func (c *requestClient) GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigReply)
	err := c.cc.Invoke(ctx, Request_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestClient) GetIMSI(ctx context.Context, in *IMSIRequest, opts ...grpc.CallOption) (*IMSIReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IMSIReply)
	err := c.cc.Invoke(ctx, Request_GetIMSI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestClient) GetRule(ctx context.Context, in *RuleRequest, opts ...grpc.CallOption) (*RuleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RuleReply)
	err := c.cc.Invoke(ctx, Request_GetRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestClient) ValidatePDR(ctx context.Context, in *ValidatePDRRequest, opts ...grpc.CallOption) (*ValidatePDRReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidatePDRReply)
	err := c.cc.Invoke(ctx, Request_ValidatePDR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestServer is the server API for Request service.
// All implementations must embed UnimplementedRequestServer
// for forward compatibility.
//
// Request service defines the main gRPC interface for UPF operations
type RequestServer interface {
	// PutRequest streams flow data for a given FSEID
	PutRequest(*FlowRequest, grpc.ServerStreamingServer[Reply]) error
	// GetConfig retrieves the UPF configuration
	GetConfig(context.Context, *ConfigRequest) (*ConfigReply, error)
	// GetIMSI retrieves IMSI-related information
	GetIMSI(context.Context, *IMSIRequest) (*IMSIReply, error)
	// GetRule retrieves rules associated with a specific FSEID
	GetRule(context.Context, *RuleRequest) (*RuleReply, error)
	// ValidatePDR validates a PDR for a given IMSI and DNN
	ValidatePDR(context.Context, *ValidatePDRRequest) (*ValidatePDRReply, error)
	mustEmbedUnimplementedRequestServer()
}

// UnimplementedRequestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRequestServer struct{}

func (UnimplementedRequestServer) PutRequest(*FlowRequest, grpc.ServerStreamingServer[Reply]) error {
	return status.Errorf(codes.Unimplemented, "method PutRequest not implemented")
}
func (UnimplementedRequestServer) GetConfig(context.Context, *ConfigRequest) (*ConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedRequestServer) GetIMSI(context.Context, *IMSIRequest) (*IMSIReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIMSI not implemented")
}
func (UnimplementedRequestServer) GetRule(context.Context, *RuleRequest) (*RuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (UnimplementedRequestServer) ValidatePDR(context.Context, *ValidatePDRRequest) (*ValidatePDRReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePDR not implemented")
}
func (UnimplementedRequestServer) mustEmbedUnimplementedRequestServer() {}
func (UnimplementedRequestServer) testEmbeddedByValue()                 {}

// UnsafeRequestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestServer will
// result in compilation errors.
type UnsafeRequestServer interface {
	mustEmbedUnimplementedRequestServer()
}

func RegisterRequestServer(s grpc.ServiceRegistrar, srv RequestServer) {
	// If the following call pancis, it indicates UnimplementedRequestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Request_ServiceDesc, srv)
}

func _Request_PutRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FlowRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RequestServer).PutRequest(m, &grpc.GenericServerStream[FlowRequest, Reply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Request_PutRequestServer = grpc.ServerStreamingServer[Reply]

func _Request_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Request_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServer).GetConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Request_GetIMSI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IMSIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServer).GetIMSI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Request_GetIMSI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServer).GetIMSI(ctx, req.(*IMSIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Request_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Request_GetRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServer).GetRule(ctx, req.(*RuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Request_ValidatePDR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePDRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServer).ValidatePDR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Request_ValidatePDR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServer).ValidatePDR(ctx, req.(*ValidatePDRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Request_ServiceDesc is the grpc.ServiceDesc for Request service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Request_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client.Request",
	HandlerType: (*RequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _Request_GetConfig_Handler,
		},
		{
			MethodName: "GetIMSI",
			Handler:    _Request_GetIMSI_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _Request_GetRule_Handler,
		},
		{
			MethodName: "ValidatePDR",
			Handler:    _Request_ValidatePDR_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutRequest",
			Handler:       _Request_PutRequest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "request.proto",
}
